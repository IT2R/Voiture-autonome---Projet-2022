/**
  ******************************************************************************
  * @file    Templates/Src/main.c 
  * @author  MCD Application Team
  * @brief   STM32F4xx HAL API Template project 
  *
  * @note    modified by ARM
  *          The modifications allow to use this file as User Code Template
  *          within the Device Family Pack.
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"                   // ARM::CMSIS:RTOS:Keil RTX
#include "Driver_SPI.h"                 // ::CMSIS Driver:I2C
#include "Driver_USART.h"               // ::CMSIS Driver:USART
#include "Driver_CAN.h"                 // ::CMSIS Driver:CAN
#include "stm32f4xx_hal.h"              // Keil::Device:STM32Cube HAL:Common
#include "Board_LED.h"                  // ::Board Support:LED
#include "stdio.h"
#include "Driver_I2C.h"                 // ::CMSIS Driver:I2C

#ifdef _RTE_
#include "RTE_Components.h"             // Component selection
#endif
#ifdef RTE_CMSIS_RTOS2                  // when RTE component CMSIS RTOS2 is used
#include "cmsis_os2.h"                  // ::CMSIS:RTOS2
#endif



#ifdef RTE_CMSIS_RTOS2_RTX5
/**
  * Override default HAL_GetTick function
  */
uint32_t HAL_GetTick (void) {
  static uint32_t ticks = 0U;
         uint32_t i;

  if (osKernelGetState () == osKernelRunning) {
    return ((uint32_t)osKernelGetTickCount ());
  }

  /* If Kernel is not running wait approximately 1 ms then increment 
     and return auxiliary tick counter value */
  for (i = (SystemCoreClock >> 14U); i > 0U; i--) {
    __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
    __NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
  }
  return ++ticks;
}

#endif

/** @addtogroup STM32F4xx_HAL_Examples
  * @{
  */

/** @addtogroup Templates
  * @{
  */

/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/
#define nbLed 16
#define seuil 2000

#define clignotantDroite 0x01
#define clignotantGauche 0x02

#define add_capt_av_gauche 0xe6
#define add_capt_av_milieu 0xe4
#define add_capt_av_droit 0xe8

#define id_envoi 0x100
#define id_reception 0x200
#define donnee_envoi 0x52 //2 octets uniquement

/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/

uint64_t sale,sale_gauche;

char Data_LED[4+nbLed*4+(2+(int)((nbLed-1)/16))];

/* Private function prototypes -----------------------------------------------*/
static void SystemClock_Config(void);
static void Error_Handler(void);
static void Configure_GPIO(void);
static void configure_ADC2_Channel_1(void);

void CallbackUART (uint32_t event);
void CallbackUART2 (uint32_t event);

extern ARM_DRIVER_USART Driver_USART3;
extern ARM_DRIVER_USART Driver_USART2;
extern ARM_DRIVER_CAN Driver_CAN2;
extern ARM_DRIVER_SPI Driver_SPI1;
extern ARM_DRIVER_I2C Driver_I2C1;// “déclaration” structure I2C0

void Thread_envoi_I2C (void const * argument);
void Thread_envoi_CAN (void const * argument);
void Init_I2C(void);
void callback_I2C (uint32_t event);
void callback_CAN (uint32_t obj_idx, uint32_t event);
void premier_envoi_I2C(void);
void CallbackCAN(uint32_t obj_idx, uint32_t event);

void TacheRFID(void const*argument);
//void CANthreadT(void const*argument);

void TacheModule(void const*argument);

void LED (void const* argument);
void Clignotant(void const* argument);

osThreadId ID_Thread_envoi_CAN;
osThreadDef (Thread_envoi_CAN, osPriorityNormal, 1, 0);

osThreadId ID_Envoi_I2C ;
osThreadDef (Thread_envoi_I2C, osPriorityNormal, 1, 0);

osThreadId ID_LED;
osThreadDef(LED, osPriorityNormal, 1, 0);

osThreadId ID_Clignotant;
osThreadDef(Clignotant, osPriorityNormal, 1, 0);

osThreadId ID_TacheModule;
osThreadDef(TacheModule,osPriorityNormal,1,0);

osThreadId ID_TacheRFID;
osThreadDef(TacheRFID,osPriorityNormal,1,0);
//osThreadId id_CANthreadT;
//osThreadDef(CANthreadT,osPriorityNormal,1,0);

osMailQId ID_BAL_val_cm;
osMailQDef (BAL_I2C, 10, uint64_t);


osMailQId ID_BAL_Son;
osMailQDef (BAL_Son, 1, char);

void remplirTabLED(char *tab, char rang, char nb_led, unsigned char intensitee, unsigned char red, unsigned char green , unsigned char blue);

void Init_LED_SPI(void){
	//LED_SPI.Initialize(mySPI_callback);
	Driver_SPI1.Initialize(NULL);
	Driver_SPI1.PowerControl(ARM_POWER_FULL);
	Driver_SPI1.Control(ARM_SPI_MODE_MASTER | 
											ARM_SPI_CPOL1_CPHA1 | 
//											ARM_SPI_MSB_LSB | 
											ARM_SPI_SS_MASTER_UNUSED |
											ARM_SPI_DATA_BITS(8), 1000000);
	Driver_SPI1.Control(ARM_SPI_CONTROL_SS, ARM_SPI_SS_INACTIVE);
}
ADC_HandleTypeDef myADC2Handle;
	void USART3_INIT(void)
	{
		Driver_USART3.Initialize(CallbackUART);
	Driver_USART3.PowerControl(ARM_POWER_FULL);
	Driver_USART3.Control(ARM_USART_MODE_ASYNCHRONOUS|
												ARM_USART_DATA_BITS_8|
												ARM_USART_STOP_BITS_1|
												ARM_USART_PARITY_NONE|
												ARM_USART_FLOW_CONTROL_NONE,
												9600);
	
	Driver_USART3.Control(ARM_USART_CONTROL_TX,1);
	Driver_USART3.Control(ARM_USART_CONTROL_RX,1);
	}
	void USART2_INIT(void)
	{
	Driver_USART2.Initialize(CallbackUART2);
	Driver_USART2.PowerControl(ARM_POWER_FULL);
	Driver_USART2.Control(ARM_USART_MODE_ASYNCHRONOUS|
												ARM_USART_DATA_BITS_8|
												ARM_USART_STOP_BITS_1|
												ARM_USART_PARITY_NONE|
												ARM_USART_FLOW_CONTROL_NONE,
												9600);
	
	Driver_USART2.Control(ARM_USART_CONTROL_TX,1);
	Driver_USART2.Control(ARM_USART_CONTROL_RX,1);
	}
	/*
void CAN2_INIT(void)
{
	Driver_CAN2.Initialize(NULL,callback_CAN);
	Driver_CAN2.PowerControl(ARM_POWER_FULL);
	Driver_CAN2.SetMode(ARM_CAN_MODE_INITIALIZATION);
	Driver_CAN2.SetBitrate(ARM_CAN_BITRATE_NOMINAL
	,125000
	,ARM_CAN_BIT_PROP_SEG(5U)|
	ARM_CAN_BIT_PHASE_SEG1(1U)|
	ARM_CAN_BIT_PHASE_SEG2(1U)|
	ARM_CAN_BIT_SJW(1U)
	);
	Driver_CAN2.ObjectConfigure(1,ARM_CAN_OBJ_TX);
	//Driver_CAN2.ObjectConfigure(0,ARM_CAN_OBJ_RX);
	Driver_CAN2.SetMode(ARM_CAN_MODE_NORMAL);
}*/
	
void Init_CAN(void){
	Driver_CAN2.Initialize(NULL,callback_CAN);
	Driver_CAN2.PowerControl(ARM_POWER_FULL);
	Driver_CAN2.SetMode(ARM_CAN_MODE_INITIALIZATION);
	Driver_CAN2.SetBitrate(ARM_CAN_BITRATE_NOMINAL, //débit fixe
	125000, //125 000 bauds
	ARM_CAN_BIT_PROP_SEG(5U) |
	ARM_CAN_BIT_PHASE_SEG1(1U) |
	ARM_CAN_BIT_PHASE_SEG2(1U) |
	ARM_CAN_BIT_SJW(1U));
	
	Driver_CAN2.ObjectConfigure(2,ARM_CAN_OBJ_TX);
	Driver_CAN2.SetMode(ARM_CAN_MODE_NORMAL);
}
void Init_I2C(void){
	Driver_I2C1.Initialize(callback_I2C);  // début initialisation
	Driver_I2C1.PowerControl(ARM_POWER_FULL); // alimentation périphérique
	Driver_I2C1.Control(ARM_I2C_BUS_SPEED, // 2nd argument = débit
	ARM_I2C_BUS_SPEED_STANDARD  );    // =100 kHz
	//Driver_I2C1.Control(ARM_I2C_BUS_CLEAR,0 );//Attention boucle bloquante
}

void callback_I2C (uint32_t event){ //Fonction lancee automatiquement pour mise à 1 de l'event de ID_Envoi_I2C
	
	static volatile uint32_t I2C_Event;
	
	// Sauvegarde les events recus
  I2C_Event |= event;
	if (event & ARM_I2C_EVENT_TRANSFER_DONE ) {
		osSignalSet(ID_Envoi_I2C, 0x01); //Mise à 1 de l'event 1
  }
}
	

/* Private functions ---------------------------------------------------------*/
/**
	
	
  * @brief  Main program
  * @param  None
  * @retval None
  */

	
	void CallbackUART (uint32_t event)
	{
		if (event == ARM_USART_EVENT_SEND_COMPLETE )
		{
		osSignalSet(ID_TacheModule,0x01);

	}
	}

	void CallbackUART2 (uint32_t event)
	{

		if (event == ARM_USART_EVENT_RECEIVE_COMPLETE )
		{
		osSignalSet(ID_TacheRFID,0x01);
	}
	}

	int main(void)
{

	
  /* STM32F4xx HAL library initialization:
       - Configure the Flash prefetch, Flash preread and Buffer caches
       - Systick timer is configured by default as source of time base, but user 
             can eventually implement his proper time base source (a general purpose 
             timer for example or other time source), keeping in mind that Time base 
             duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
             handled in milliseconds basis.
       - Low Level Initialization
     */
  HAL_Init();

  /* Configure the system clock to 168 MHz */
  SystemClock_Config();
  SystemCoreClockUpdate();

  /* Add your application code here
     */
	//#ifdef RTE_CMSIS_RTOS2
  /* Initialize CMSIS-RTOS2 */
  osKernelInitialize ();
	
	//NVIC_SetPriority(USART3_IRQn,2);		// nécessaire ? (si LCD ?)
	
	LED_Initialize ();
	USART3_INIT();
	USART2_INIT();
	Init_CAN();
	Init_I2C();
	Init_LED_SPI();
configure_ADC2_Channel_1();
	Configure_GPIO();
  /* Create thread functions that start executing, 
  Example: osThreadNew(app_main, NULL, NULL); */
	ID_LED = osThreadCreate (osThread(LED), NULL);
	ID_Clignotant = osThreadCreate(osThread(Clignotant),NULL);
	ID_TacheModule = osThreadCreate(osThread(TacheModule),NULL);
		ID_Envoi_I2C = osThreadCreate(osThread(Thread_envoi_I2C),NULL);
	ID_Thread_envoi_CAN = osThreadCreate(osThread(Thread_envoi_CAN),NULL);
	
	ID_BAL_val_cm = osMailCreate(osMailQ(BAL_I2C), NULL);
	ID_TacheRFID = osThreadCreate(osThread(TacheRFID),NULL);
	//id_CANthreadT = osThreadCreate(osThread(CANthreadT),NULL);
	ID_BAL_Son = osMailCreate(osMailQ(BAL_Son), NULL);

	/* Start thread execution */
  osKernelStart();
	
	//LED_On (3);
//#endif
	osDelay(osWaitForever);
	

}
void remplirTabLED(char *tab, char rang, char nb_led, unsigned char intensitee, unsigned char red, unsigned char green , unsigned char blue) {
	char i;
	for (i = 0; i < nb_led ;i++)
	{
			tab[(rang+i)*4]= (0xe0 | intensitee);
			tab[1+(rang+i)*4]= blue;
			tab[2+(rang+i)*4]= green;
			tab[3+(rang+i)*4]= red;
	}
}/*
void CallbackCAN(uint32_t obj_idx, uint32_t event)
{
	if(event==ARM_CAN_EVENT_SEND_COMPLETE)
	{
		osSignalSet(id_CANthreadT,0x01);
	}
}*/
void callback_CAN (uint32_t obj_idx, uint32_t event){ //Fonction lancee automatiquement pour mise à 1 de l'event de ID_Envoi_C
	
	  switch (event)
    {
    case ARM_CAN_EVENT_SEND_COMPLETE:
		{
        osSignalSet(ID_Thread_envoi_CAN, 0x01);
        break;
		}
	}
}
void premier_envoi_I2C(void){

	unsigned char adressecapt1;
	uint8_t ecriture_reg[2], lecture_reg2[1], lecture_reg3[1];
	unsigned char tabDATA2[1],tabDATA3[1];
	LED_On(1);
	
  ecriture_reg[0]=0;//Registre 0
  ecriture_reg[1]=0x51;
	lecture_reg2[0]=2; //Registre 2 pour lire la mesure des 8 bits de poids fort
	lecture_reg3[0]=3; //Registre 3 pour lire la mesure des 8 bits de poids faible
	adressecapt1 = 0xe6 ;
  adressecapt1 = (adressecapt1>>1); //0x73
		
    //Pour initier la mesure
		Driver_I2C1.MasterTransmit(adressecapt1, ecriture_reg, 2, false);
		//while (Driver_I2C1.GetStatus().busy==1); //Attente de la fin de la transmission
		osSignalWait(0x01, osWaitForever);
		
		//Pour recevoir la premiere mesure
		osDelay(100);
		Driver_I2C1.MasterTransmit(adressecapt1, lecture_reg2, 1, true);
		//while (Driver_I2C1.GetStatus().busy==1); //Attente de la fin de la transmission
		osSignalWait(0x01, osWaitForever);
		Driver_I2C1.MasterReceive(adressecapt1, (uint8_t*)tabDATA2,1, false); //Si renvoi en octets (8bits)
		//while (Driver_I2C1.GetStatus().busy==1); //Attente de la fin de la transmission
		osSignalWait(0x01, osWaitForever);
		
		
		//Pour recevoir la deuxieme mesure
		Driver_I2C1.MasterTransmit(adressecapt1, lecture_reg3, 1, true);
		//while (Driver_I2C1.GetStatus().busy==1); //Attente de la fin de la transmission
		osSignalWait(0x01, osWaitForever);
		Driver_I2C1.MasterReceive(adressecapt1, (uint8_t*)tabDATA3, 1, false); //Si renvoi en octets (8bits)
		//while (Driver_I2C1.GetStatus().busy==1); //Attente de la fin de la transmission
		osSignalWait(0x01, osWaitForever);
}
void Thread_envoi_I2C (void const * argument){
	unsigned char add_capt_av_gauche_7bits, add_capt_av_milieu_7bits, add_capt_av_droit_7bits ;
	uint8_t ecriture_reg[2], lecture_reg2[1], lecture_reg3[1];
	uint8_t tabDATA2[1],tabDATA3[1], tabDATA4[1], tabDATA5[1], tabDATA6[1],tabDATA7[1];
	uint16_t donneecapt_av_gauche,donneecapt_av_milieu, donneecapt_av_droit;
	uint64_t *envoi;
		char *envoiSon;
	
  ecriture_reg[0]=0;//Registre 0
  ecriture_reg[1]=0x51;
	lecture_reg2[0]=2; //Registre 2 pour lire la mesure des 8 bits de poids fort
	lecture_reg3[0]=3; //Registre 3 pour lire la mesure des 8 bits de poids faible
	
  add_capt_av_gauche_7bits = (add_capt_av_gauche>>1); //@7 bits
	add_capt_av_milieu_7bits = (add_capt_av_milieu>>1); //@7 bits
	add_capt_av_droit_7bits = (add_capt_av_droit>>1); //@7 bits
	
	premier_envoi_I2C();
	
	while(1){
			
		
		LED_On(0);
    //Pour initier la mesure du capteur avant gauche
		Driver_I2C1.MasterTransmit(add_capt_av_gauche_7bits, ecriture_reg, 2, false);
		//while (Driver_I2C1.GetStatus().busy==1); //Attente de la fin de la transmission
		osSignalWait(0x01, osWaitForever);
		
		//Pour initier la mesure du capteur avant milieu
		Driver_I2C1.MasterTransmit(add_capt_av_milieu_7bits, ecriture_reg, 2, false);
		//while (Driver_I2C1.GetStatus().busy==1); //Attente de la fin de la transmission
		osSignalWait(0x01, osWaitForever);
		
		//Pour initier la mesure du capteur avant droit
		Driver_I2C1.MasterTransmit(add_capt_av_droit_7bits, ecriture_reg, 2, false);
		//while (Driver_I2C1.GetStatus().busy==1); //Attente de la fin de la transmission
		osSignalWait(0x01, osWaitForever);
		
		
		osDelay(100);
		
		{//Lecture des registres
		/*------------------------------------------ CAPTEUR AVANT GAUCHE ------------------------------------------*/
		//Pour recevoir la premiere mesure
		Driver_I2C1.MasterTransmit(add_capt_av_gauche_7bits, lecture_reg2, 1, true);
		//while (Driver_I2C1.GetStatus().busy==1); //Attente de la fin de la transmission
		osSignalWait(0x01, osWaitForever);
		Driver_I2C1.MasterReceive(add_capt_av_gauche_7bits, (uint8_t*)tabDATA2, 1, false); //Si renvoi en octets (8bits)
		//while (Driver_I2C1.GetStatus().busy==1); //Attente de la fin de la transmission
		osSignalWait(0x01, osWaitForever);
		
		
		//Pour recevoir la deuxieme mesure
		Driver_I2C1.MasterTransmit(add_capt_av_gauche_7bits, lecture_reg3, 1, true);
		//while (Driver_I2C1.GetStatus().busy==1); //Attente de la fin de la transmission
		osSignalWait(0x01, osWaitForever);
		Driver_I2C1.MasterReceive(add_capt_av_gauche_7bits, (uint8_t*)tabDATA3, 1, false); //Si renvoi en octets (8bits)
		//while (Driver_I2C1.GetStatus().busy==1); //Attente de la fin de la transmission
		osSignalWait(0x01, osWaitForever);
		
		//Si renvoi en 2 octets (16 bits)
		donneecapt_av_gauche=(uint16_t)((tabDATA2[0]<<8)|tabDATA3[0]); //Donnee finale sur 16 bits du resultat de la distance en cm
		
				/*------------------------------------------ CAPTEUR AVANT MILIEU ------------------------------------------*/
		//Pour recevoir la premiere mesure
		Driver_I2C1.MasterTransmit(add_capt_av_milieu_7bits, lecture_reg2, 1, true);
		//while (Driver_I2C1.GetStatus().busy==1); //Attente de la fin de la transmission
		osSignalWait(0x01, osWaitForever);
		Driver_I2C1.MasterReceive(add_capt_av_milieu_7bits, (uint8_t*)tabDATA4, 1, false); //Si renvoi en octets (8bits)
		//while (Driver_I2C1.GetStatus().busy==1); //Attente de la fin de la transmission
		osSignalWait(0x01, osWaitForever);
		
		
		//Pour recevoir la deuxieme mesure
		Driver_I2C1.MasterTransmit(add_capt_av_milieu_7bits, lecture_reg3, 1, true);
		//while (Driver_I2C1.GetStatus().busy==1); //Attente de la fin de la transmission
		osSignalWait(0x01, osWaitForever);
		Driver_I2C1.MasterReceive(add_capt_av_milieu_7bits, (uint8_t*)tabDATA5, 1, false); //Si renvoi en octets (8bits)
		//while (Driver_I2C1.GetStatus().busy==1); //Attente de la fin de la transmission
		osSignalWait(0x01, osWaitForever);
		
		//Si renvoi en 2 octets (16 bits)
		donneecapt_av_milieu=(uint16_t)((tabDATA4[0]<<8)|tabDATA5[0]); //Donnee finale sur 16 bits du resultat de la distance en cm
		
				/*------------------------------------------ CAPTEUR AVANT DROIT ------------------------------------------*/
		//Pour recevoir la premiere mesure
		Driver_I2C1.MasterTransmit(add_capt_av_droit_7bits, lecture_reg2, 1, true);
		//while (Driver_I2C1.GetStatus().busy==1); //Attente de la fin de la transmission
		osSignalWait(0x01, osWaitForever);
		Driver_I2C1.MasterReceive(add_capt_av_droit_7bits, (uint8_t*)tabDATA6, 1, false); //Si renvoi en octets (8bits)
		//while (Driver_I2C1.GetStatus().busy==1); //Attente de la fin de la transmission
		osSignalWait(0x01, osWaitForever);
		
		
		//Pour recevoir la deuxieme mesure
		Driver_I2C1.MasterTransmit(add_capt_av_droit_7bits, lecture_reg3, 1, true);
		//while (Driver_I2C1.GetStatus().busy==1); //Attente de la fin de la transmission
		osSignalWait(0x01, osWaitForever);
		Driver_I2C1.MasterReceive(add_capt_av_droit_7bits, (uint8_t*)tabDATA7, 1, false); //Si renvoi en octets (8bits)
		//while (Driver_I2C1.GetStatus().busy==1); //Attente de la fin de la transmission
		osSignalWait(0x01, osWaitForever);
		
		//Si renvoi en 2 octets (16 bits)
		donneecapt_av_droit=(uint16_t)((tabDATA6[0]<<8)|tabDATA7[0]); //Donnee finale sur 16 bits du resultat de la distance en cm
	}
		
		//Pour l'envoie UART via BAL
	
		//envoi = osMailAlloc(ID_BAL_val_cm, osWaitForever);
		//*envoi=(uint64_t)((donneecapt_av_gauche <<32)|(donneecapt_av_milieu <<16)|donneecapt_av_droit);
		//*envoi = ((donneecapt_av_gauche<<32)|(donneecapt_av_milieu<<16)|donneecapt_av_droit);
		//osMailPut(ID_BAL_val_cm, envoi);
	
		sale = ((donneecapt_av_milieu <<16)|donneecapt_av_droit);
		sale_gauche = donneecapt_av_gauche;
	  LED_On(3);
	}
}
void TacheRFID(void const*argument)
{
	char cle[14],test[14];
	int j;
	bool ok;
	char *envoiSon;
	cle[1]='0';
	cle[2]='8';
	cle[3]='0';
	cle[4]='0';
	cle[5]='8';
	cle[6]='C';
	cle[7]='2';
	cle[8]='3';
	cle[9]='E';
	cle[10]='9';
	cle[11]='4';
	cle[12]='E';
  /* Infinite loop */
  while (1)
  {
		ok = true;
		
		Driver_USART2.Receive(test,14);
		
		//while(Driver_USART2.GetRxCount()<1);
		osSignalWait(0x01,osWaitForever);
		
		for(j=1;j<13;j++)
		{
			if(cle[j]!=test[j])
				{ 
					ok = false;
				}	
		}
		

		
		if(ok == true)
		{
			//osSignalSet(id_CANthreadT,0x02);
			envoiSon = osMailAlloc(ID_BAL_Son, osWaitForever);
		*envoiSon=0x01;

		osMailPut(ID_BAL_Son, envoiSon);
		}
		else
		{

		}
		
  }
}
void TacheModule(void const* argument)
{
	char tabplay[10],tabvol[10],tabtrack[10],tabtrack2[10],tabtrack3[10];
	int situation;
	char *recepSon;
	short CHKplay,CHKvol,CHKtrack,CHKtrack2,CHKtrack3;
	osEvent EV_situation;
	situation = 0;
	
	tabplay[0]=0x7E; // start
	tabplay[1]=0xFF; // VER (à compter)
	tabplay[2]=0x06; // LEN (à compter)
	tabplay[3]=0x0B; // CMD (à compter)
	tabplay[4]=0x00; // Feedback (à compter)
	tabplay[5]=0x00; // para 1 (à compter)
	tabplay[6]=0x00; // para 2 (à compter)
	CHKplay = 0x0000-tabplay[1]-tabplay[2]-tabplay[3]-tabplay[4]-tabplay[5]-tabplay[6];
	tabplay[7]= (CHKplay>>16) - 0x0001;
	tabplay[8]=  CHKplay;
	tabplay[9]=0xEF; // end

	tabvol[0]=0x7E; // start
	tabvol[1]=0xFF; // VER (à compter)
	tabvol[2]=0x06; // LEN (à compter)
	tabvol[3]=0x06; // CMD (à compter)
	tabvol[4]=0x00; // Feedback (à compter)
	tabvol[5]=0x00; // para 1 (à compter)
	tabvol[6]=0x10; // para 2 (à compter)
	CHKvol = 0x0000-tabvol[1]-tabvol[2]-tabvol[3]-tabvol[4]-tabvol[5]-tabvol[6];
	tabvol[7]= (CHKvol>>16) - 0x0001;
	tabvol[8]=  CHKvol;
	tabvol[9]=0xEF; // end

	tabtrack[0]=0x7E; // start
	tabtrack[1]=0xFF; // VER (à compter)
	tabtrack[2]=0x06; // LEN (à compter)
	tabtrack[3]=0x03; // CMD (à compter)
	tabtrack[4]=0x00; // Feedback (à compter)
	tabtrack[5]=0x00; // para 1 (à compter)
	tabtrack[6]=0x04; // para 2 (à compter)
	CHKtrack = 0x0000-tabtrack[1]-tabtrack[2]-tabtrack[3]-tabtrack[4]-tabtrack[5]-tabtrack[6];
	tabtrack[7]= (CHKtrack>>16) - 0x0001;
	tabtrack[8]=  CHKtrack;
	tabtrack[9]=0xEF; // end

	tabtrack2[0]=0x7E; // start
	tabtrack2[1]=0xFF; // VER (à compter)
	tabtrack2[2]=0x06; // LEN (à compter)
	tabtrack2[3]=0x03; // CMD (à compter)
	tabtrack2[4]=0x00; // Feedback (à compter)
	tabtrack2[5]=0x00; // para 1 (à compter)
	tabtrack2[6]=0x07; // para 2 (à compter)
	CHKtrack2 = 0x0000-tabtrack2[1]-tabtrack2[2]-tabtrack2[3]-tabtrack2[4]-tabtrack2[5]-tabtrack2[6];
	tabtrack2[7]= (CHKtrack2>>16) - 0x0001;
	tabtrack2[8]=  CHKtrack2;
	tabtrack2[9]=0xEF; // end

	tabtrack3[0]=0x7E; // start
	tabtrack3[1]=0xFF; // VER (à compter)
	tabtrack3[2]=0x06; // LEN (à compter)
	tabtrack3[3]=0x03; // CMD (à compter)
	tabtrack3[4]=0x00; // Feedback (à compter)
	tabtrack3[5]=0x00; // para 1 (à compter)
	tabtrack3[6]=0x03; // para 2 (à compter)
	CHKtrack3 = 0x0000-tabtrack3[1]-tabtrack3[2]-tabtrack3[3]-tabtrack3[4]-tabtrack3[5]-tabtrack3[6];
	tabtrack3[7]= (CHKtrack3>>16) - 0x0001;
	tabtrack3[8]=  CHKtrack3;
	tabtrack3[9]=0xEF; // end

	//while(Driver_USART3.GetStatus().tx_busy==1);
		
	Driver_USART3.Send(tabvol,10);
	osSignalWait(0x01,osWaitForever);

	//while(Driver_USART3.GetStatus().tx_busy==1);

	Driver_USART3.Send(tabplay,10);
	osSignalWait(0x01,osWaitForever);

	//while(Driver_USART3.GetStatus().tx_busy==1);

		//Driver_USART3.Send(tabtrack,10);
			//	osSignalWait(0x01,osWaitForever);
				
	situation = 0;

		
  /* Infinite loop */
  while (1)
  {
		EV_situation = osMailGet(ID_BAL_Son, osWaitForever);
		recepSon = EV_situation.value.p;
		situation = *recepSon;
		osMailFree(ID_BAL_Son, recepSon);
		

		//	LED_Off(3);
			 if (situation == 0x01) //clef
			{
				

				Driver_USART3.Send(tabtrack,10);
				osSignalWait(0x01,osWaitForever);
				osDelay(5000);
				situation = 0;
		
			}
			else if (situation == 0x02) //telemetre
			{
				
					
				Driver_USART3.Send(tabtrack2,10);
				osSignalWait(0x01,osWaitForever);
				osDelay(5000);
				situation = 0;
				
			}
			else if (situation ==0x03) //cligno
			{

							
				Driver_USART3.Send(tabtrack3,10);
				osSignalWait(0x01,osWaitForever);
				osDelay(5000);
				situation = 0;
				
			}
		}
	}
/*
void CANthreadT(void const*argument)
{
	unsigned char data[2] = {0};
	
  ARM_CAN_MSG_INFO tx_msg_info;
	
	while(1)
	{
		osSignalWait(0x02,osWaitForever);
		LED_On(2);
		LED_Off(4);
		tx_msg_info.id = 0x5F8;
		tx_msg_info.rtr = 0;
		data[0]=0x01;
		Driver_CAN2.MessageSend(1,&tx_msg_info,data,1);
		osSignalWait(0x01,osWaitForever);
	}
}*/
	
void Thread_envoi_CAN (void const * argument){
	
	ARM_CAN_MSG_INFO	message_a_transmettre;
	uint8_t data[8]; //max 8 octets à envoyer
	uint64_t *recep, valeur_cm;
	//osEvent EV_valeur_cm;
	
	while(1){
		//EV_valeur_cm = osMailGet(ID_BAL_val_cm, osWaitForever);
		//recep = EV_valeur_cm.value.p;
		//valeur_cm = *recep;
		//osMailFree(ID_BAL_val_cm, recep);
		
		valeur_cm=sale;

		message_a_transmettre.id = ARM_CAN_STANDARD_ID(id_envoi); //ID du message transmis		
		data[0] = (char)((valeur_cm & 0x0000FF0000000000)>>40);
		data[1] = (char)((valeur_cm & 0x000000FF00000000)>>32);
		data[2] = (char)((valeur_cm & 0x00000000FF000000)>>24);
		data[3] = (char)((valeur_cm & 0x0000000000FF0000)>>16);
		data[4] = (char)((valeur_cm & 0x000000000000FF00)>>8);
		data[5] = (char)(valeur_cm & 0x00000000000000FF);
		
		//------------------------POUR LE CAPTEUR GAUCHE------------------------//
		valeur_cm=sale_gauche;
		data[0] = (char)((valeur_cm & 0x000000000000FF00)>>8);
		data[1] = (char)(valeur_cm & 0x00000000000000FF);
		
		
		
		
		Driver_CAN2.MessageSend(2, &message_a_transmettre, data, 6); //envoi avec 6 infos
		osSignalWait(0x01, osWaitForever);
		osDelay(100);		
	}
}
void LED (void const* argument) {
	int i;
	uint32_t  Adc_value;
	char Adc_value_char[10];
	
	for (i=0;i<4;i++){
		Data_LED[i] = 0;
	}
		
	Data_LED[sizeof(Data_LED)/sizeof(Data_LED[0])-2] = 0;
	Data_LED[sizeof(Data_LED)/sizeof(Data_LED[0])-1] = 0;
	
	remplirTabLED(Data_LED,1,nbLed,2,0,0,0);
  Driver_SPI1.Send(Data_LED,sizeof(Data_LED)/sizeof(Data_LED[0]));
	while (1)
  {
		//osDelay(1000);
		Driver_SPI1.Send(Data_LED,sizeof(Data_LED)/sizeof(Data_LED[0]));
		
		HAL_ADC_Start(&myADC2Handle); // start A/D conversion
		for(i=0;i<10;i++)
		ITM_SendChar(Adc_value_char[i]);
		if(HAL_ADC_PollForConversion(&myADC2Handle, osWaitForever) == 0x00U) //conversion complete
		{
			Adc_value  = HAL_ADC_GetValue(&myADC2Handle);
			if ( Adc_value > seuil)
			{
				LED_On(0);
				remplirTabLED(Data_LED,1,4,2,0,0,0);
				remplirTabLED(Data_LED,9,4,2,0,0,0);

				Driver_SPI1.Send(Data_LED,sizeof(Data_LED)/sizeof(Data_LED[0]));
			}
			else 
			{
				LED_Off(0);
				remplirTabLED(Data_LED ,1,4,8,127,127,127);
				remplirTabLED(Data_LED ,9,4,8,127,127,127);
				Driver_SPI1.Send(Data_LED,sizeof(Data_LED)/sizeof(Data_LED[0]));
			}
				
			/*while(Driver_SPI1.GetStatus != 0)
			{
				ITM_SendChar( (char) Driver_SPI1.GetStatus);
				osDelay(100);
			}*/
			
			for(i=0;i<10;i++)
			ITM_SendChar(Adc_value_char[i]);
			//osDelay(500);
		}
		
  }
}

void Clignotant (void const * argument)
{
	//ARM_CAN_MSG_INFO                rx_msg_info;
	char nb_data, i;
//	osEvent event;
	
	LED_On(0);
	for (i=0;i<4;i++){
		Data_LED[i] = 0;
	}
		
	Data_LED[sizeof(Data_LED)/sizeof(Data_LED[0])-2] = 0;
	Data_LED[sizeof(Data_LED)/sizeof(Data_LED[0])-1] = 0;
	nb_data = clignotantGauche;
	

	while(1)
	{
		LED_On(1);
		//event = osSignalWait(0x0001,osWaitForever);
		//Driver_CAN2.MessageRead(0, &rx_msg_info, data_buf, 8);
		//nb_data = rx_msg_info.dlc
		if (nb_data == clignotantDroite)
		{
			remplirTabLED(Data_LED,7,6,4,0,0,127);
			osDelay(750);
			remplirTabLED(Data_LED,7,6,0,0,0,0);
			osDelay(750);
		}
		else if (nb_data == clignotantGauche)
		{
			remplirTabLED(Data_LED,5,4,4,127,0,0);
			Driver_SPI1.Send(Data_LED,sizeof(Data_LED)/sizeof(Data_LED[0]));
			osDelay(750);
			LED_On(2);
			remplirTabLED(Data_LED,5,4,4,0,0,0);
			Driver_SPI1.Send(Data_LED,sizeof(Data_LED)/sizeof(Data_LED[0]));
			osDelay(600);
			LED_On(3);
		}
	}
}
void Configure_GPIO(void)
{
	 
	GPIO_InitTypeDef ADCpin; //create an instance of GPIO_InitTypeDef C struct
	__HAL_RCC_GPIOA_CLK_ENABLE(); // enable clock to GPIOA
	ADCpin.Pin = GPIO_PIN_1; // Select pin PA0
	ADCpin.Mode = GPIO_MODE_ANALOG; // Select Analog Mode
	ADCpin.Pull = GPIO_NOPULL; // Disable internal pull-up or pull-down resistor
	HAL_GPIO_Init(GPIOA, &ADCpin); // initialize PA0 as analog input pin
}

void configure_ADC2_Channel_1(void)
{
	
	ADC_ChannelConfTypeDef Channel_AN1; // create an instance of ADC_ChannelConfTypeDef
	
	myADC2Handle.Instance = ADC2; // create an instance of ADC2
	
	
	__HAL_RCC_ADC2_CLK_ENABLE(); // enable clock to ADC2 module
	myADC2Handle.Init.Resolution = ADC_RESOLUTION_12B; // select 12-bit resolution 
	myADC2Handle.Init.EOCSelection = ADC_EOC_SINGLE_CONV; //select  single conversion as a end of conversion event
	myADC2Handle.Init.DataAlign = ADC_DATAALIGN_RIGHT; // set digital output data right justified
	myADC2Handle.Init.ClockPrescaler =ADC_CLOCK_SYNC_PCLK_DIV8; 
	HAL_ADC_Init(&myADC2Handle); // initialize AD2 with myADC2Handle configuration settings
	
  /*select ADC2 channel */
	
	Channel_AN1.Channel = ADC_CHANNEL_1; // select analog channel 0
	Channel_AN1.Rank = 1; // set rank to 1
	Channel_AN1.SamplingTime = ADC_SAMPLETIME_15CYCLES; // set sampling time to 15 clock cycles
	HAL_ADC_ConfigChannel(&myADC2Handle, &Channel_AN1); // select channel_0 for ADC2 module. 
}
/*
void CANthreadR(void const*argument)
{
	unsigned char data[2] = {0};

  ARM_CAN_MSG_INFO rx_msg_info;
	osEvent evt;
	while(1)
	{
	  evt = osSignalWait(0x01,osWaitForever);
		Driver_CAN2.MessageRead(0,&rx_msg_info,data,1);
		
		
		situation = rx_msg_info.id;
		
	
	}
}
*/

/**
  * @brief  System Clock Configuration
  *         The system Clock is configured as follow : 
  *            System Clock source            = PLL (HSE)
  *            SYSCLK(Hz)                     = 168000000
  *            HCLK(Hz)                       = 168000000
  *            AHB Prescaler                  = 1
  *            APB1 Prescaler                 = 4
  *            APB2 Prescaler                 = 2
  *            HSE Frequency(Hz)              = 8000000
  *            PLL_M                          = 25
  *            PLL_N                          = 336
  *            PLL_P                          = 2
  *            PLL_Q                          = 7
  *            VDD(V)                         = 3.3
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();

  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    /* Initialization Error */
    Error_Handler();
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    /* Initialization Error */
    Error_Handler();
  }

  /* STM32F405x/407x/415x/417x Revision Z devices: prefetch is supported */
  if (HAL_GetREVID() == 0x1001)
  {
    /* Enable the Flash prefetch */
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
  }
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
  /* User may add here some code to deal with this error */
  while(1)
  {
  }
}

#ifdef  USE_FULL_ASSERT

/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

  /* Infinite loop */
  while (1)
  {
  }
}

#endif

/**
  * @}
  */ 

/**
  * @}
  */ 

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
